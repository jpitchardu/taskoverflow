{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///home/jpichardo/development/study/taskoverflow/client/src/hooks/tasks.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\n\nconst API_URL = \"http://localhost:5000/api\";\n\ntype Task = {\n  id: string;\n  title: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport interface CreateTaskPayload {\n  title: string;\n}\n\nexport interface UpdateTaskPayload {\n  id: string;\n  title: string;\n}\n\nexport function useTasks() {\n  return useQuery({\n    queryKey: [\"tasks\"],\n    queryFn: async () => {\n      const response = await fetch(`${API_URL}/tasks`);\n      const data = await response.json();\n      return data.tasks as Task[];\n    },\n  });\n}\n\nexport function useTask(id: string) {\n  return useQuery({\n    queryKey: [\"tasks\", id],\n    queryFn: async () => {\n      const response = await fetch(`${API_URL}/tasks/${id}`);\n      const data = await response.json();\n      return data.task as Task;\n    },\n  });\n}\n\nexport function useCreateTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (task: CreateTaskPayload) => {\n      const response = await fetch(`${API_URL}/tasks`, {\n        method: \"POST\",\n        body: JSON.stringify(task),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create task\");\n      }\n\n      const data = await response.json();\n      return data.task as Task;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"tasks\"] });\n    },\n  });\n}\n\nexport function useUpdateTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (task: UpdateTaskPayload) => {\n      const response = await fetch(`${API_URL}/tasks/${task.id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(task),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update task\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"tasks\"] });\n    },\n  });\n}\n\nexport function useDeleteTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`${API_URL}/tasks/${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete task\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"tasks\"] });\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;AAAA;AAAA;AAAA;;AAEA,MAAM,UAAU;AAkBT,SAAS;IACd,OAAO,CAAA,GAAA,2QAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU;YAAC;SAAQ;QACnB,SAAS;YACP,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,MAAM,CAAC;YAC/C,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO,KAAK,KAAK;QACnB;IACF;AACF;AAEO,SAAS,QAAQ,EAAU;IAChC,OAAO,CAAA,GAAA,2QAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU;YAAC;YAAS;SAAG;QACvB,SAAS;YACP,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,OAAO,EAAE,IAAI;YACrD,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO,KAAK,IAAI;QAClB;IACF;AACF;AAEO,SAAS;IACd,MAAM,cAAc,CAAA,GAAA,sRAAA,CAAA,iBAAc,AAAD;IAEjC,OAAO,CAAA,GAAA,8QAAA,CAAA,cAAW,AAAD,EAAE;QACjB,YAAY,OAAO;YACjB,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,MAAM,CAAC,EAAE;gBAC/C,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO,KAAK,IAAI;QAClB;QACA,WAAW;YACT,YAAY,iBAAiB,CAAC;gBAAE,UAAU;oBAAC;iBAAQ;YAAC;QACtD;IACF;AACF;AAEO,SAAS;IACd,MAAM,cAAc,CAAA,GAAA,sRAAA,CAAA,iBAAc,AAAD;IAEjC,OAAO,CAAA,GAAA,8QAAA,CAAA,cAAW,AAAD,EAAE;QACjB,YAAY,OAAO;YACjB,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE;gBAC1D,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO,SAAS,IAAI;QACtB;QACA,WAAW;YACT,YAAY,iBAAiB,CAAC;gBAAE,UAAU;oBAAC;iBAAQ;YAAC;QACtD;IACF;AACF;AAEO,SAAS;IACd,MAAM,cAAc,CAAA,GAAA,sRAAA,CAAA,iBAAc,AAAD;IAEjC,OAAO,CAAA,GAAA,8QAAA,CAAA,cAAW,AAAD,EAAE;QACjB,YAAY,OAAO;YACjB,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,OAAO,EAAE,IAAI,EAAE;gBACrD,QAAQ;YACV;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;QACF;QACA,WAAW;YACT,YAAY,iBAAiB,CAAC;gBAAE,UAAU;oBAAC;iBAAQ;YAAC;QACtD;IACF;AACF","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/jpichardo/development/study/taskoverflow/client/src/components/TaskComposer.tsx"],"sourcesContent":["\"use client\";\n\nimport { useCreateTask } from \"@/hooks/tasks\";\nimport { useCallback, useState } from \"react\";\n\nexport function TaskComposer() {\n  const { mutate: createTask } = useCreateTask();\n\n  const [title, setTitle] = useState(\"\");\n\n  const onChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const onClick = useCallback(() => {\n    createTask({ title });\n    setTitle(\"\");\n  }, [createTask, title]);\n\n  return (\n    <div className=\"flex flex-row gap-2 p-4 border-b border-gray-200\">\n      <input type=\"text\" value={title} onChange={onChange} />\n      <button onClick={onClick}>Create</button>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKO,SAAS;IACd,MAAM,EAAE,QAAQ,UAAU,EAAE,GAAG,CAAA,GAAA,qHAAA,CAAA,gBAAa,AAAD;IAE3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,MAAM,WAAW,CAAA,GAAA,oUAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC5B,SAAS,EAAE,MAAM,CAAC,KAAK;IACzB,GAAG,EAAE;IAEL,MAAM,UAAU,CAAA,GAAA,oUAAA,CAAA,cAAW,AAAD,EAAE;QAC1B,WAAW;YAAE;QAAM;QACnB,SAAS;IACX,GAAG;QAAC;QAAY;KAAM;IAEtB,qBACE,6WAAC;QAAI,WAAU;;0BACb,6WAAC;gBAAM,MAAK;gBAAO,OAAO;gBAAO,UAAU;;;;;;0BAC3C,6WAAC;gBAAO,SAAS;0BAAS;;;;;;;;;;;;AAGhC","debugId":null}}]
}